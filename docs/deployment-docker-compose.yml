# Use root/example as user/password credentials
version: '3.9'

networks:
  microservices:

services:

  # DB and Queue -----------------------
  mysql:
    image: mysql
    # NOTE: use of "mysql_native_password" is not recommended: https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password
    # (this is just an example, not intended to be a production configuration)
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    ports:
      - '3306:3306'
    environment:
      MYSQL_DATABASE: 'db'
      MYSQL_USER: 'mysql'
      MYSQL_PASSWORD: 'mysqlpw'
      MYSQL_ROOT_PASSWORD: 'rootpw'
    networks:
      - microservices
    healthcheck:
      #test: [ "CMD", "mysqladmin", "-u$MYSQL_USER", "-p$MYSQL_PASSWORD",  "ping", "-h", "localhost" ]
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 20s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres
    restart: always
    ports:
      - '5432:5432'
    environment:
      POSTGRES_PASSWORD: postgrespw
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    networks:
      - microservices
    healthcheck:
      #test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 20s
      timeout: 5s
      retries: 5

  msrabbitmq:
    image: rabbitmq:3.8-management
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      RABBITMQ_DEFAULT_USER: rabbit
      RABBITMQ_DEFAULT_PASS: rabbitpw
    networks:
      - microservices
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 20s
      timeout: 5s
      retries: 5

  mszipkin:
    image: openzipkin/zipkin:2.23
    ports:
      - '9411:9411'
    networks:
      - microservices
    healthcheck:
      test: ["CMD", "nc", "-vz", "-w1", "localhost", "9411"]
      interval: 20s
      timeout: 5s
      retries: 5

  # Services -----------------------

  ispark-service:
    image: ispark-service:0.0.1-SNAPSHOT
    container_name: ispark-service
    networks:
      - microservices
    environment:
      SERVER_PORT: 8081
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_SERVER_URL: http://eureka-server:1380
      ZIPKIN_URL: http://mszipkin:9411
      POSTGRES_SERVER_HOST: postgres
      SPRING_DATASOURCE_URL: 'jdbc:postgresql://postgres:5432/postgres'
      SPRING_DATASOURCE_USERNAME: 'postgres'
      SPRING_DATASOURCE_PASSWORD: 'postgrespw'
      SPRING_JPA_HIBERNATE_DDL_AUTO: 'create-drop'
    ports:
      - '8081:8081'
    depends_on:
      postgres:
        condition: service_healthy
      mszipkin:
        condition: service_healthy
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy

  vehicle-service:
    image: vehicle-service:0.0.1-SNAPSHOT
    container_name: vehicle-service
    networks:
      - microservices
    environment:
      SERVER_PORT: 8082
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_SERVER_URL: http://eureka-server:1380
      ZIPKIN_URL: http://mszipkin:9411
      RABBITMQ_HOST: msrabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_DEFAULT_PASS: 'rabbitpw'
      RABBITMQ_DEFAULT_USER: 'rabbit'
      SPRING_DATASOURCE_PASSWORD: 'mysqlpw'
      SPRING_DATASOURCE_URL: 'jdbc:mysql://mysql:3306/db'
      SPRING_DATASOURCE_USERNAME: 'mysql'
      SPRING_JPA_HIBERNATE_DDL_AUTO: 'create-drop'
    ports:
      - '8082:8082'
    healthcheck:
      test: [ "CMD-SHELL", "curl --location --request POST 'localhost:8082/parking?plate=01 V 3829&placeId=2866' && echo 'OK'" ]
      interval: 5s
      timeout: 2s
      retries: 3
    depends_on:
      mysql:
        condition: service_healthy
      mszipkin:
        condition: service_healthy
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy

  notification-service:
    image: notification-service:0.0.1-SNAPSHOT
    container_name: notification-service
    networks:
      - microservices
    environment:
      SERVER_PORT: 8083
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_SERVER_URL: http://eureka-server:1380
      ZIPKIN_URL: http://mszipkin:9411
      RABBITMQ_DEFAULT_PASS: 'rabbitpw'
      RABBITMQ_DEFAULT_USER: 'rabbit'
      RABBITMQ_HOST: msrabbitmq
      RABBITMQ_PORT: 5672
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASS: ${MAIL_PASS}
    ports:
      - '8083:8083'
    depends_on:
      msrabbitmq:
        condition: service_healthy
      mszipkin:
        condition: service_healthy
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      vehicle-service:
        condition: service_healthy

  # Management -----------------------
  config-server:
    image: config-server:0.0.1-SNAPSHOT
    container_name: config-server
    restart: always
    networks:
      - microservices
    environment:
      ZIPKIN_URL: http://mszipkin:9411
      SERVER_PORT: 8888
    ports:
      - '8888:8888'
    depends_on:
      mszipkin:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8888/actuator && echo 'OK'" ]
      interval: 5s
      timeout: 2s
      retries: 3

  eureka-server:
    image: eureka-server:0.0.1-SNAPSHOT
    container_name: eureka-server
    restart: always
    networks:
      - microservices
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      ZIPKIN_URL: http://mszipkin:9411
      SERVER_PORT: 1380
    ports:
      - '1380:1380'
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:1380 && echo 'OK'" ]
      interval: 5s
      timeout: 2s
      retries: 3
    depends_on:
      config-server:
        condition: service_healthy

  admin-server:
    image: admin-server:0.0.1-SNAPSHOT
    container_name: admin-server
    restart: always
    networks:
      - microservices
    environment:
      SERVER_PORT: 1379
      ZIPKIN_URL: http://mszipkin:9411
      EUREKA_SERVER_URL: http://eureka-server:1380
    ports:
      - '1379:1379'
    depends_on:
      mszipkin:
        condition: service_healthy
      eureka-server:
        condition: service_healthy

  cloud-gateway:
    image: cloud-gateway:0.0.1-SNAPSHOT
    container_name: cloud-gateway
    networks:
      - microservices
    environment:
      EUREKA_SERVER_URL: http://eureka-server:1380
      ZIPKIN_URL: http://mszipkin:9411
      SERVER_PORT: 8088
    ports:
      - '8088:8088'
    depends_on:
      mszipkin:
        condition: service_healthy
      eureka-server:
        condition: service_healthy

#Service health command: docker inspect --format='{{json .State.Health}}' docs_mysql_1